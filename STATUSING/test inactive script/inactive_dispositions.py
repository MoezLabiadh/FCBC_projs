import os
import pyodbc
import pandas as pd
import arcpy
from tantalis_bigQuery import load_sql


def connect_to_DB (driver,server,port,dbq, username,password):
    """ Returns a connection to Oracle database"""
    try:
        connectString ="""
                    DRIVER={driver};
                    SERVER={server}:{port};
                    DBQ={dbq};
                    Uid={uid};
                    Pwd={pwd}
                       """.format(driver=driver,server=server, port=port,
                                  dbq=dbq,uid=username,pwd=password)

        connection = pyodbc.connect(connectString)
        print  ("...Successffuly connected to the database")
    except:
        raise Exception('...Connection failed! Please check your connection parameters')

    return connection


def read_query(connection,query):
    "Returns a df containing SQL Query results"
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        cols = [x[0] for x in cursor.description]
        rows = cursor.fetchall()
        return pd.DataFrame.from_records(rows, columns=cols)
    
    finally:
        if cursor is not None:
            cursor.close()


def execute_process(parcel_list,bcgw_user,bcgw_pwd):
    """Generates a csv of inactive Lands dispositions"""
    
    print ('Connecting to BCGW.')
    driver = 'Oracle in OraClient12Home1'
    server = 'bcgw.bcgov'
    port= '1521'
    dbq= 'idwprod1'
    hostname = 'bcgw.bcgov/idwprod1.bcgov'
    #username = os.getenv('bcgw_user')
    #username = 'XXXX'
    #password = os.getenv('bcgw_pwd')
    #password = 'XXXX'
    connection= connect_to_DB (driver,server,port,dbq,bcgw_user,bcgw_pwd)
    
    print ('Loading SQL queries.')
    sql = load_sql ()
    
    print ('Execute the query.')
    # this is the list of all Parcels intersecting with the AOI.
    # for demo, I'm using a "fake" list
    # a real list can be generated by intersecting the AOI with WHSE_TANTALIS.TA_INTEREST_PARCEL_SHAPES
    # something like this:
    # parcel_list = [row[0] for row in arcpy.da.SearchCursor(intersection_fc,['INTRID_SID'])]
        
    #parcel_list = [830449,141190,837133,837134,64966,830915,854869,839652]
    

    # Split the parcels list into chunks (Oracle SQL doesent support IN clauses with more thatn 1000 entry)
    # create chunks of size 1000
    n = 999
    array = [parcel_list[i:i + n] for i in range(0, len(parcel_list), n)]

    #Construct SQL string
    first_str = "("
    middle_str  = ''
    last_str = ")"

    for i, value in enumerate (array):
        joined = '(' + ','.join(str(x) for x in value) + ')'
        add_string = 'mm.intrid_sid IN ' + str(joined)

        if i < len(array)-1:
            add_string = add_string + ' OR '
        else:
            pass
        
        middle_str += add_string

    parcels_q_str = first_str + middle_str +  last_str



    query = sql['inactive'].format (prcl= parcels_q_str)# add the parcels list to the SQL query
 
    df = read_query(connection,query) #execute the query and store results in a dataframe

    print ('Export a csv of inactive dispositions.')
    # export the dataframe to csv.
    # the csv is then fed into the main AST/UOT script to replace ILRR report ???
    out_file = r'\\spatialfiles.bcgov\Work\lwbc\visr\Workarea\moez_labiadh\TOOLS\SCRIPTS\STATUSING\inactive_query\inactives_largeAOI.csv'
    df.to_csv (out_file, index=False)

    return df # just to inspect results

if __name__==__name__:
    #parcel_list = [830449,141190,837133,837134,64966,830915,854869,839652]
    #bcgw_user = os.getenv('bcgw_user')
    bcgw_user = 'XXX'
    #bcgw_pwd = os.getenv('bcgw_pwd')
    bcgw_pwd = 'XXX'
    #execute_process(parcel_list,bcgw_user,bcgw_pwd)

    #aoi = r"\\spatialfiles.bcgov\work\srm\wml\Workarea\arcproj\!Williams_Lake_Toolbox_Development\automated_status_ARCPRO\steve\test_files\TEST_shape.shp"
    aoi = r"\\spatialfiles.bcgov\work\srm\wml\Workarea\arcproj\!Williams_Lake_Toolbox_Development\automated_status_ARCPRO\steve\test_files\TEST_district.shp"
    sde = r"h:\arcpro\bcgw.sde"
    parcel_fc = os.path.join(sde, r'WHSE_TANTALIS.TA_INTEREST_PARCEL_SHAPES')
    clip_parcel = arcpy.Clip_analysis(parcel_fc, aoi, r"memory\parcel_clip")
    result = int(arcpy.GetCount_management(clip_parcel).getOutput(0))
    print('{} has {} records'.format("Tantalis Parcels", result))
    if result > 0:
        parcel_list = [row[0] for row in arcpy.da.SearchCursor(clip_parcel,['INTRID_SID'])]
        print(len(parcel_list))

        execute_process(parcel_list,bcgw_user,bcgw_pwd)

    else:
        print("No interest parcels returned!")
