import os
import cx_Oracle
import pandas as pd
from tantalis_bigQuery import load_sql


def connect_to_DB (username,password,hostname):
    """ Returns a connection to Oracle database"""
    try:
        connection = cx_Oracle.connect(username, password, hostname, encoding="UTF-8")
        print  ("...Successffuly connected to the database")
    except:
        raise Exception('...Connection failed! Please check your login parameters')

    return connection


def read_query(connection,query):
    "Returns a df containing SQL Query results"
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        cols = [x[0] for x in cursor.description]
        rows = cursor.fetchall()
        return pd.DataFrame(rows, columns=cols)
    
    finally:
        if cursor is not None:
            cursor.close()


def execute_process ():
    """Generates a csv of inactive Lands dispositions"""
    
    print ('Connecting to BCGW.')
    hostname = 'bcgw.bcgov/idwprod1.bcgov'
    bcgw_user = os.getenv('bcgw_user')
    #bcgw_user = 'XXXX'
    bcgw_pwd = os.getenv('bcgw_pwd')
    #bcgw_pwd = 'XXXX'
    connection = connect_to_DB (bcgw_user,bcgw_pwd,hostname)
    
    print ('Loading SQL queries.')
    sql = load_sql ()
    
    print ('Execute the query.')
    # this is the list of all Parcels intersecting with the AOI.
    # for demo, I'm using a "fake" list
    # a real list can be generated by intersecting the AOI with WHSE_TANTALIS.TA_INTEREST_PARCEL_SHAPES
    # something like this:
    # parcel_list = [row[0] for row in arcpy.da.SearchCursor(intersection_fc,['INTRID_SID'])]
        
    parcel_list = [830449,141190,837133,837134,64966,830915,854869,839652]
    
    parcels = ",".join(str(x) for x in parcel_list) # convert the python list to SQL format
    
    query = sql['inactive'].format (prcl= parcels)# add the parcels list to the SQL query
    
    df = read_query(connection,query) #execute the query and store results in a dataframe
    
    
    print ('Export a csv of inactive dispositions.')
    # export the dataframe to csv.
    # the csv is then fed into the main AST/UOT script to replace ILRR report ???
    out_file = r'\\spatialfiles.bcgov\Work\lwbc\visr\Workarea\moez_labiadh\TOOLS\SCRIPTS\STATUSING\inactive_query/incative.csv'
    df.to_csv (out_file, index=False)

    return df # just to inspect results

    
df = execute_process ()
    
    
